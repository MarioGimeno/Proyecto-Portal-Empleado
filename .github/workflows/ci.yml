name: CI for Android and Java Projects

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-android:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          token: ${{ secrets.PAT }}  # Utiliza el PAT para la autenticación

      - name: Set up JDK 17 for Android
        uses: actions/setup-java@v2
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Grant execute permission for gradlew
        run: chmod +x ./Proyecto_Portal_Empleado_Cliente/gradlew

      - name: Delete .gradle directory
        run: rm -rf ./Proyecto_Portal_Empleado_Cliente/.gradle

      - name: Clean build files
        working-directory: ./Proyecto_Portal_Empleado_Cliente
        run: ./gradlew clean

      - name: Build Android App
        working-directory: ./Proyecto_Portal_Empleado_Cliente
        run: ./gradlew assembleDebug

  build-backend:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          token: ${{ secrets.PAT }}  # Utiliza el PAT para la autenticación

      - name: Set up JDK 17 for Java backend
        uses: actions/setup-java@v2
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Grant execute permission for mvnw
        run: chmod +x ./Proyecto_Portal_Empleado_Servidor/mvnw

      - name: Build Backend Server
        working-directory: ./Proyecto_Portal_Empleado_Servidor
        run: ./mvnw clean package

      - name: Run JAR on EC2
        uses: appleboy/ssh-action@v0.1.4
        with:
          host: 52.86.210.155
          username: ubuntu
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: 22
          script: |
            # Encontrar el proceso del JAR y matarlo si existe
            PID=$(pgrep -f 'java -jar /home/ubuntu/Proyecto-Portal-Empleado/Proyecto_Portal_Empleado-0.0.1-SNAPSHOT.jar')
            if [ -n "$PID" ]; then
              echo "Matando el proceso con PID $PID"
              kill -9 $PID  # Usamos kill -9 para forzar la terminación inmediata del proceso
              KILL_EXIT_CODE=$?  # Capturamos el código de salida de kill
              sleep 5  # Esperar para asegurarse de que el proceso termine

              # Manejo de cualquier código de salida
              if [ $KILL_EXIT_CODE -eq 0 ]; then
                echo "Proceso detenido correctamente"
              else
                echo "Error al intentar detener el proceso con PID $PID"
                exit 1
              fi
            else
              echo "No se encontró ningún proceso ejecutando el JAR"
            fi

            # Navegar al directorio y limpiar archivos antiguos de logs
            cd /home/ubuntu/Proyecto-Portal-Empleado
            rm -f nohup.out output.log

            # Verificar que no haya otro proceso en el puerto 8080 con un timeout de espera
            TIMEOUT=60
            while sudo ss -tulnp | grep 8080; do
              echo "El puerto 8080 está ocupado. Esperando..."
              sleep 5
              TIMEOUT=$((TIMEOUT-5))
              if [ $TIMEOUT -le 0 ]; then
                echo "Timeout: El puerto 8080 sigue ocupado después de 60 segundos."
                exit 1
              fi
            done

            # Ejecutar el nuevo JAR en segundo plano
            nohup java -jar Proyecto_Portal_Empleado-0.0.1-SNAPSHOT.jar > output.log 2>&1 &
            sleep 5  # Esperar unos segundos para asegurarse de que el proceso arranca

            # Verificar si el JAR está corriendo
            if pgrep -f 'java -jar /home/ubuntu/Proyecto-Portal-Empleado/Proyecto_Portal_Empleado-0.0.1-SNAPSHOT.jar'; then
              echo "JAR ejecutado correctamente."
              echo "Los logs están siendo registrados en /home/ubuntu/Proyecto-Portal-Empleado/output.log"
            else
              echo "Error al ejecutar el JAR."
              exit 1
            fi

      # Step opcional: Verificar los logs
      - name: Check JAR logs
        uses: appleboy/ssh-action@v0.1.4
        with:
          host: 52.86.210.155
          username: ubuntu
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: 22
          script: |
            cat /home/ubuntu/Proyecto-Portal-Empleado/output.log
