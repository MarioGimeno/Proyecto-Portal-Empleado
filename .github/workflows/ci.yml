name: CI for Android and Java Projects

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-android:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          token: ${{ secrets.PAT }}  # Utiliza el PAT para la autenticación

      - name: Set up JDK 17 for Android
        uses: actions/setup-java@v2
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Grant execute permission for gradlew
        run: chmod +x ./Proyecto_Portal_Empleado_Cliente/gradlew

      - name: Delete .gradle directory
        run: rm -rf ./Proyecto_Portal_Empleado_Cliente/.gradle

      - name: Clean build files
        working-directory: ./Proyecto_Portal_Empleado_Cliente
        run: ./gradlew clean

      - name: Build Android App
        working-directory: ./Proyecto_Portal_Empleado_Cliente
        run: ./gradlew assembleDebug

  build-backend:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          token: ${{ secrets.PAT }}  # Utiliza el PAT para la autenticación

      - name: Set up JDK 17 for Java backend
        uses: actions/setup-java@v2
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Grant execute permission for mvnw
        run: chmod +x ./Proyecto_Portal_Empleado_Servidor/mvnw

      - name: Build Backend Server
        working-directory: ./Proyecto_Portal_Empleado_Servidor
        run: ./mvnw clean package

      - name: Run JAR on EC2
        uses: appleboy/ssh-action@v0.1.4
        with:
          host: 52.86.210.155
          username: ubuntu
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: 22
          script: |
            # Verificar si el puerto 8080 ya está en uso
            if sudo ss -tulnp | grep 8080; then
              echo "El puerto 8080 ya está ocupado. No se puede iniciar el nuevo JAR."
              exit 1
            else
              echo "El puerto 8080 está libre. Iniciando el nuevo JAR."
              # Navegar al directorio y limpiar archivos antiguos de logs
              cd /home/ubuntu/Proyecto-Portal-Empleado
              rm -f nohup.out output.log

              # Ejecutar el nuevo JAR en segundo plano
              nohup java -jar Proyecto_Portal_Empleado-0.0.1-SNAPSHOT.jar > output.log 2>&1 &
              sleep 5  # Esperar unos segundos para asegurarse de que el proceso arranca

              # Verificar si el JAR está corriendo
              if pgrep -f 'java -jar /home/ubuntu/Proyecto-Portal-Empleado/Proyecto_Portal_Empleado-0.0.1-SNAPSHOT.jar'; then
                echo "JAR ejecutado correctamente."
                echo "Los logs están siendo registrados en /home/ubuntu/Proyecto-Portal-Empleado/output.log"
              else
                echo "Error al ejecutar el JAR."
                exit 1
              fi
            fi

      - name: Check JAR logs
        uses: appleboy/ssh-action@v0.1.4
        with:
          host: 52.86.210.155
          username: ubuntu
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: 22
          script: |
            cat /home/ubuntu/Proyecto-Portal-Empleado/output.log

      - name: Pull latest code on EC2
        uses: appleboy/ssh-action@v0.1.4
        with:
          host: 52.86.210.155
          username: ubuntu
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: 22
          script: |
            cd /home/ubuntu/Proyecto-Portal-Empleado
            git config --global credential.helper store
            echo "https://${{ secrets.EC2_PAT }}:@github.com" > ~/.git-credentials
            git pull origin main
            rm ~/.git-credentials  # Limpia el archivo de credenciales después de la operación

      - name: Build and run Docker container on EC2
        uses: appleboy/ssh-action@v0.1.4
        with:
          host: 52.86.210.155
          username: ubuntu
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: 22
          script: |
            cd /home/ubuntu/Proyecto-Portal-Empleado/Proyecto_Portal_Empleado_Servidor
            docker build -t proyecto-portal-empleado .
            docker stop proyecto-portal-empleado-container || true
            docker rm proyecto-portal-empleado-container || true
            docker run -d -p 8080:8080 --name proyecto-portal-empleado-container proyecto-portal-empleado
